/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Reason as PrismaReason,
  Donation as PrismaDonation,
} from "@prisma/client";

export class ReasonServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ReasonCountArgs, "select">): Promise<number> {
    return this.prisma.reason.count(args);
  }

  async reasons(args: Prisma.ReasonFindManyArgs): Promise<PrismaReason[]> {
    return this.prisma.reason.findMany(args);
  }
  async reason(
    args: Prisma.ReasonFindUniqueArgs
  ): Promise<PrismaReason | null> {
    return this.prisma.reason.findUnique(args);
  }
  async createReason(args: Prisma.ReasonCreateArgs): Promise<PrismaReason> {
    return this.prisma.reason.create(args);
  }
  async updateReason(args: Prisma.ReasonUpdateArgs): Promise<PrismaReason> {
    return this.prisma.reason.update(args);
  }
  async deleteReason(args: Prisma.ReasonDeleteArgs): Promise<PrismaReason> {
    return this.prisma.reason.delete(args);
  }

  async findDonations(
    parentId: string,
    args: Prisma.DonationFindManyArgs
  ): Promise<PrismaDonation[]> {
    return this.prisma.reason
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .donations(args);
  }
}
