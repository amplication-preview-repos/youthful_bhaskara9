/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Reason } from "./Reason";
import { ReasonCountArgs } from "./ReasonCountArgs";
import { ReasonFindManyArgs } from "./ReasonFindManyArgs";
import { ReasonFindUniqueArgs } from "./ReasonFindUniqueArgs";
import { CreateReasonArgs } from "./CreateReasonArgs";
import { UpdateReasonArgs } from "./UpdateReasonArgs";
import { DeleteReasonArgs } from "./DeleteReasonArgs";
import { DonationFindManyArgs } from "../../donation/base/DonationFindManyArgs";
import { Donation } from "../../donation/base/Donation";
import { ReasonService } from "../reason.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Reason)
export class ReasonResolverBase {
  constructor(
    protected readonly service: ReasonService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Reason",
    action: "read",
    possession: "any",
  })
  async _reasonsMeta(
    @graphql.Args() args: ReasonCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Reason])
  @nestAccessControl.UseRoles({
    resource: "Reason",
    action: "read",
    possession: "any",
  })
  async reasons(@graphql.Args() args: ReasonFindManyArgs): Promise<Reason[]> {
    return this.service.reasons(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Reason, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Reason",
    action: "read",
    possession: "own",
  })
  async reason(
    @graphql.Args() args: ReasonFindUniqueArgs
  ): Promise<Reason | null> {
    const result = await this.service.reason(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Reason)
  @nestAccessControl.UseRoles({
    resource: "Reason",
    action: "create",
    possession: "any",
  })
  async createReason(@graphql.Args() args: CreateReasonArgs): Promise<Reason> {
    return await this.service.createReason({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Reason)
  @nestAccessControl.UseRoles({
    resource: "Reason",
    action: "update",
    possession: "any",
  })
  async updateReason(
    @graphql.Args() args: UpdateReasonArgs
  ): Promise<Reason | null> {
    try {
      return await this.service.updateReason({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Reason)
  @nestAccessControl.UseRoles({
    resource: "Reason",
    action: "delete",
    possession: "any",
  })
  async deleteReason(
    @graphql.Args() args: DeleteReasonArgs
  ): Promise<Reason | null> {
    try {
      return await this.service.deleteReason(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Donation], { name: "donations" })
  @nestAccessControl.UseRoles({
    resource: "Donation",
    action: "read",
    possession: "any",
  })
  async findDonations(
    @graphql.Parent() parent: Reason,
    @graphql.Args() args: DonationFindManyArgs
  ): Promise<Donation[]> {
    const results = await this.service.findDonations(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
