/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Supporter } from "./Supporter";
import { SupporterCountArgs } from "./SupporterCountArgs";
import { SupporterFindManyArgs } from "./SupporterFindManyArgs";
import { SupporterFindUniqueArgs } from "./SupporterFindUniqueArgs";
import { CreateSupporterArgs } from "./CreateSupporterArgs";
import { UpdateSupporterArgs } from "./UpdateSupporterArgs";
import { DeleteSupporterArgs } from "./DeleteSupporterArgs";
import { DonationFindManyArgs } from "../../donation/base/DonationFindManyArgs";
import { Donation } from "../../donation/base/Donation";
import { SupporterService } from "../supporter.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Supporter)
export class SupporterResolverBase {
  constructor(
    protected readonly service: SupporterService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Supporter",
    action: "read",
    possession: "any",
  })
  async _supportersMeta(
    @graphql.Args() args: SupporterCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Supporter])
  @nestAccessControl.UseRoles({
    resource: "Supporter",
    action: "read",
    possession: "any",
  })
  async supporters(
    @graphql.Args() args: SupporterFindManyArgs
  ): Promise<Supporter[]> {
    return this.service.supporters(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Supporter, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Supporter",
    action: "read",
    possession: "own",
  })
  async supporter(
    @graphql.Args() args: SupporterFindUniqueArgs
  ): Promise<Supporter | null> {
    const result = await this.service.supporter(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Supporter)
  @nestAccessControl.UseRoles({
    resource: "Supporter",
    action: "create",
    possession: "any",
  })
  async createSupporter(
    @graphql.Args() args: CreateSupporterArgs
  ): Promise<Supporter> {
    return await this.service.createSupporter({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Supporter)
  @nestAccessControl.UseRoles({
    resource: "Supporter",
    action: "update",
    possession: "any",
  })
  async updateSupporter(
    @graphql.Args() args: UpdateSupporterArgs
  ): Promise<Supporter | null> {
    try {
      return await this.service.updateSupporter({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Supporter)
  @nestAccessControl.UseRoles({
    resource: "Supporter",
    action: "delete",
    possession: "any",
  })
  async deleteSupporter(
    @graphql.Args() args: DeleteSupporterArgs
  ): Promise<Supporter | null> {
    try {
      return await this.service.deleteSupporter(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Donation], { name: "donations" })
  @nestAccessControl.UseRoles({
    resource: "Donation",
    action: "read",
    possession: "any",
  })
  async findDonations(
    @graphql.Parent() parent: Supporter,
    @graphql.Args() args: DonationFindManyArgs
  ): Promise<Donation[]> {
    const results = await this.service.findDonations(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
