/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Supporter as PrismaSupporter,
  Donation as PrismaDonation,
} from "@prisma/client";

export class SupporterServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SupporterCountArgs, "select">
  ): Promise<number> {
    return this.prisma.supporter.count(args);
  }

  async supporters(
    args: Prisma.SupporterFindManyArgs
  ): Promise<PrismaSupporter[]> {
    return this.prisma.supporter.findMany(args);
  }
  async supporter(
    args: Prisma.SupporterFindUniqueArgs
  ): Promise<PrismaSupporter | null> {
    return this.prisma.supporter.findUnique(args);
  }
  async createSupporter(
    args: Prisma.SupporterCreateArgs
  ): Promise<PrismaSupporter> {
    return this.prisma.supporter.create(args);
  }
  async updateSupporter(
    args: Prisma.SupporterUpdateArgs
  ): Promise<PrismaSupporter> {
    return this.prisma.supporter.update(args);
  }
  async deleteSupporter(
    args: Prisma.SupporterDeleteArgs
  ): Promise<PrismaSupporter> {
    return this.prisma.supporter.delete(args);
  }

  async findDonations(
    parentId: string,
    args: Prisma.DonationFindManyArgs
  ): Promise<PrismaDonation[]> {
    return this.prisma.supporter
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .donations(args);
  }
}
